__author__ = 'Administrator'

from pyhive import hive
import config
import time
import datetime
import logging
from logging.handlers import TimedRotatingFileHandler
from dbutil import *

logger = logging.getLogger("analyzePhoneLogger")
logger.setLevel(logging.INFO)
#文件日志保留日志90天
file_log_handler = logging.handlers.TimedRotatingFileHandler(filename=config.log_path+"/analyze_phone.log", when='D', interval=1, backupCount=90)
file_log_handler.setFormatter(logging.Formatter("%(asctime)s - %(levelname)s - %(filename)s[:%(lineno)d] - %(message)s"))
#控制台日志
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.DEBUG)
console_handler.setFormatter(logging.Formatter("%(asctime)s - %(levelname)s - %(message)s"))
#设置日志handler
logger.addHandler(file_log_handler)
logger.addHandler(console_handler)

hive_conn = None
def get_hive_conn():
    global hive_conn
    if hive_conn is None:
        hive_conn = hive.Connection(host=config.host, port=config.port, username='', database=config.database)
    return hive_conn

def execute_command(command):
    conn = get_hive_conn()
    cursor = conn.cursor()
    logger.info('执行hive:' + command)
    cursor.execute(command)
    return cursor



def analyze(visit_list, setp_minute=30):
    if visit_list is None:
        return
    hive_sql = 'select * from '
    index = 1
    for visit in visit_list:
        ci = visit.ci
        eci = visit.eci
        timestamp = datetime.datetime.utcfromtimestamp(visit.timestamp)
        start_time = timestamp - datetime.timedelta(minutes=setp_minute)
        end_time = timestamp + datetime.timedelta(minutes=setp_minute)
        month_part = start_time.strftime("%Y%m")
        day_part = start_time.strftime("%d")

        if index == 1:
            hive_sql += '(select distinct(msisdn) from unicom_4g_mc where eci=\'%s\' and proc_starttime >= \'%s\' and proc_starttime<=\'%s\' and month_part=\'%s\' and day_part=\'%s\') t%s \n' % (eci, str(start_time), str(end_time), str(month_part), str(day_part), str(index))
        if ci is not None:
            index += 1
            hive_sql += ' inner join\n '
            hive_sql += '(select distinct(msisdn) from unicom_3g_mc where ci=\'%s\' and proc_starttime >= \'%s\' and proc_starttime<=\'%s\' and month_part=\'%s\' and day_part=\'%s\') t%s on t%s.msisdn = t%s.msisdn \n' % (eci, str(start_time), str(end_time), str(month_part), str(day_part), str(index), str(index), str(index-1))
        if eci is not None:
            index += 1
            hive_sql += ' inner join\n '
            hive_sql += '(select distinct(msisdn) from unicom_4g_mc where eci=\'%s\' and proc_starttime >= \'%s\' and proc_starttime<=\'%s\' and month_part=\'%s\' and day_part=\'%s\') t%s on t%s.msisdn = t%s.msisdn \n' % (eci, str(start_time), str(end_time), str(month_part), str(day_part), str(index), str(index), str(index-1))
    logger.info('分析face_id:%s, sql:%sl' % (visit.face_id, hive_sql))
    hive_sql2 = 'select count(*) from unicom_4g_mc where month_part=201908 and day_part=11'
    cursor = execute_command(hive_sql2)
    list = cursor.fetchall()
    if len(list) > 5:
        return None
    return list


def scan_visit():
    visit_list = query_visit_list()
    while True:
        source_list = []
        visit_list = query_visit_list()
        if visit_list is None:
            continue
        for visit in visit_list:
            source_list.append(visit)
            face_id = visit.face_id
            his_visit_list = query_his_visit_list(face_id)
            if his_visit_list is None:
                continue
            for his_visit in his_visit_list:
                source_list.append(his_visit)
            result_list = analyze(source_list)
            if result_list:
                for result in result_list:
                    analyze_result = VituAnalyzeResult()
                    analyze_result.face_id = visit.face_id
                    analyze_result.msisdn = result[0]
            change_visit_finish(visit)
        time.sleep(10)
scan_visit()
